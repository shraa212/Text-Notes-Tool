{"ast":null,"code":"var _jsxFileName = \"D:\\\\text-notes-tool\\\\client\\\\src\\\\components\\\\NoteCanvas.jsx\";\nimport React from 'react';\nimport axios from 'axios';\nimport Note from './Note';\nimport './NoteCanvas.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteCanvas = ({\n  activeLabel,\n  labels,\n  setLabels,\n  notes,\n  setNotes,\n  fetchNotes,\n  moveToTrash\n}) => {\n  const updateNote = async updatedNote => {\n    const isBlank = !updatedNote.content;\n\n    // Case: remove temporary note if it's still blank\n    if (updatedNote.tempId && isBlank && !updatedNote._touched) {\n      setNotes(prev => prev.filter(n => n.tempId !== updatedNote.tempId));\n      return;\n    }\n\n    // Case: saved note but blank\n    if (updatedNote._id && isBlank && !updatedNote._touched) {\n      try {\n        const res = await axios.put(`http://localhost:5000/api/notes/${updatedNote._id}`, {\n          ...updatedNote,\n          content: ''\n        });\n        setNotes(prev => prev.map(n => n._id === updatedNote._id ? res.data : n));\n      } catch (err) {\n        console.error('Failed to update blank note:', err);\n      }\n      return;\n    }\n\n    // Case: create a new note (from temp)\n    if (updatedNote.tempId && !updatedNote._id) {\n      try {\n        const res = await axios.post('http://localhost:5000/api/notes', {\n          ...updatedNote,\n          tempId: undefined\n        });\n        setNotes(prev => prev.map(n => n.tempId === updatedNote.tempId ? res.data : n));\n      } catch (err) {\n        console.error('Failed to save new note:', err);\n      }\n      return;\n    }\n\n    // Case: update existing note\n    if (updatedNote._id) {\n      try {\n        const res = await axios.put(`http://localhost:5000/api/notes/${updatedNote._id}`, updatedNote);\n        setNotes(prev => prev.map(n => n._id === updatedNote._id ? res.data : n));\n        const noteLabels = updatedNote.labels || [];\n        const currentLabelNames = labels.map(l => l.name.toLowerCase());\n        const newLabels = noteLabels.filter(l => !currentLabelNames.includes(l.toLowerCase()));\n        if (newLabels.length > 0) {\n          const addedLabels = await Promise.all(newLabels.map(name => axios.post('http://localhost:5000/api/labels', {\n            name\n          }).then(res => res.data)));\n          setLabels(prev => [...prev, ...addedLabels].sort((a, b) => a.name.localeCompare(b.name)));\n        }\n      } catch (err) {\n        console.error('Error updating note:', err);\n      }\n    }\n  };\n  const togglePin = async noteIdOrNote => {\n    const id = typeof noteIdOrNote === 'string' ? noteIdOrNote : noteIdOrNote._id;\n    const noteToToggle = notes.find(n => n._id === id);\n    if (!noteToToggle) return;\n    const updated = {\n      ...noteToToggle,\n      pinned: !noteToToggle.pinned,\n      _touched: true\n    };\n    await updateNote(updated);\n  };\n  const filterByLabel = note => {\n    var _note$labels;\n    if (activeLabel === 'Trash') return false;\n    return activeLabel === 'Notes' || !activeLabel || activeLabel === 'Labels' ? true : (_note$labels = note.labels) === null || _note$labels === void 0 ? void 0 : _note$labels.includes(activeLabel);\n  };\n  const addTemporaryNote = () => {\n    const hasEmptyNote = notes.some(n => !n.content || n.content.trim() === '');\n    if (hasEmptyNote) {\n      alert('Please fill or delete the empty note before adding a new one.');\n      return;\n    }\n    const tempNote = {\n      tempId: `temp-${Date.now()}`,\n      content: '',\n      x: Math.floor(Math.random() * 600),\n      y: Math.floor(Math.random() * 400),\n      color: '#ffff88',\n      font: 'sans-serif',\n      pinned: false,\n      labels: [],\n      _touched: false\n    };\n    setNotes(prev => [...prev, tempNote]);\n  };\n  const filteredNotes = notes.filter(filterByLabel);\n  const pinnedNotes = filteredNotes.filter(note => note.pinned);\n  const unpinnedNotes = filteredNotes.filter(note => !note.pinned);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-notes note-canvas\",\n      children: [...pinnedNotes, ...unpinnedNotes].map(note => /*#__PURE__*/_jsxDEV(Note, {\n        note: note,\n        onDelete: () => {\n          if (note._id) moveToTrash(note);else if (note.tempId) setNotes(prev => prev.filter(n => n.tempId !== note.tempId));\n        },\n        onPin: () => togglePin(note),\n        onUpdate: updateNote\n      }, note._id || note.tempId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-note-btn\",\n      onClick: addTemporaryNote,\n      title: \"Add new note\",\n      children: \"\\uFF0B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_c = NoteCanvas;\nexport default NoteCanvas;\nvar _c;\n$RefreshReg$(_c, \"NoteCanvas\");","map":{"version":3,"names":["React","axios","Note","jsxDEV","_jsxDEV","NoteCanvas","activeLabel","labels","setLabels","notes","setNotes","fetchNotes","moveToTrash","updateNote","updatedNote","isBlank","content","tempId","_touched","prev","filter","n","_id","res","put","map","data","err","console","error","post","undefined","noteLabels","currentLabelNames","l","name","toLowerCase","newLabels","includes","length","addedLabels","Promise","all","then","sort","a","b","localeCompare","togglePin","noteIdOrNote","id","noteToToggle","find","updated","pinned","filterByLabel","note","_note$labels","addTemporaryNote","hasEmptyNote","some","trim","alert","tempNote","Date","now","x","Math","floor","random","y","color","font","filteredNotes","pinnedNotes","unpinnedNotes","className","children","onDelete","onPin","onUpdate","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","_c","$RefreshReg$"],"sources":["D:/text-notes-tool/client/src/components/NoteCanvas.jsx"],"sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport Note from './Note';\r\nimport './NoteCanvas.css';\r\n\r\nconst NoteCanvas = ({\r\n  activeLabel,\r\n  labels,\r\n  setLabels,\r\n  notes,\r\n  setNotes,\r\n  fetchNotes,\r\n  moveToTrash\r\n}) => {\r\n  const updateNote = async (updatedNote) => {\r\n    const isBlank = !updatedNote.content;\r\n\r\n    // Case: remove temporary note if it's still blank\r\n    if (updatedNote.tempId && isBlank && !updatedNote._touched) {\r\n      setNotes(prev => prev.filter(n => n.tempId !== updatedNote.tempId));\r\n      return;\r\n    }\r\n\r\n    // Case: saved note but blank\r\n    if (updatedNote._id && isBlank && !updatedNote._touched) {\r\n      try {\r\n        const res = await axios.put(`http://localhost:5000/api/notes/${updatedNote._id}`, {\r\n          ...updatedNote,\r\n          content: ''\r\n        });\r\n        setNotes(prev => prev.map(n => n._id === updatedNote._id ? res.data : n));\r\n      } catch (err) {\r\n        console.error('Failed to update blank note:', err);\r\n      }\r\n      return;\r\n    }\r\n\r\n    // Case: create a new note (from temp)\r\n    if (updatedNote.tempId && !updatedNote._id) {\r\n      try {\r\n        const res = await axios.post('http://localhost:5000/api/notes', {\r\n          ...updatedNote,\r\n          tempId: undefined\r\n        });\r\n        setNotes(prev =>\r\n          prev.map(n =>\r\n            n.tempId === updatedNote.tempId ? res.data : n\r\n          )\r\n        );\r\n      } catch (err) {\r\n        console.error('Failed to save new note:', err);\r\n      }\r\n      return;\r\n    }\r\n\r\n    // Case: update existing note\r\n    if (updatedNote._id) {\r\n      try {\r\n        const res = await axios.put(\r\n          `http://localhost:5000/api/notes/${updatedNote._id}`,\r\n          updatedNote\r\n        );\r\n        setNotes(prev =>\r\n          prev.map(n => n._id === updatedNote._id ? res.data : n)\r\n        );\r\n\r\n        const noteLabels = updatedNote.labels || [];\r\n        const currentLabelNames = labels.map(l => l.name.toLowerCase());\r\n        const newLabels = noteLabels.filter(\r\n          l => !currentLabelNames.includes(l.toLowerCase())\r\n        );\r\n\r\n        if (newLabels.length > 0) {\r\n          const addedLabels = await Promise.all(\r\n            newLabels.map(name =>\r\n              axios.post('http://localhost:5000/api/labels', { name }).then(res => res.data)\r\n            )\r\n          );\r\n          setLabels(prev =>\r\n            [...prev, ...addedLabels].sort((a, b) =>\r\n              a.name.localeCompare(b.name)\r\n            )\r\n          );\r\n        }\r\n      } catch (err) {\r\n        console.error('Error updating note:', err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const togglePin = async (noteIdOrNote) => {\r\n    const id = typeof noteIdOrNote === 'string' ? noteIdOrNote : noteIdOrNote._id;\r\n    const noteToToggle = notes.find(n => n._id === id);\r\n    if (!noteToToggle) return;\r\n    const updated = { ...noteToToggle, pinned: !noteToToggle.pinned, _touched: true };\r\n    await updateNote(updated);\r\n  };\r\n\r\n  const filterByLabel = (note) => {\r\n    if (activeLabel === 'Trash') return false;\r\n    return activeLabel === 'Notes' || !activeLabel || activeLabel === 'Labels'\r\n      ? true\r\n      : note.labels?.includes(activeLabel);\r\n  };\r\n\r\n  const addTemporaryNote = () => {\r\n    const hasEmptyNote = notes.some(n =>\r\n      (!n.content || n.content.trim() === '')\r\n    );\r\n\r\n    if (hasEmptyNote) {\r\n      alert('Please fill or delete the empty note before adding a new one.');\r\n      return;\r\n    }\r\n\r\n    const tempNote = {\r\n      tempId: `temp-${Date.now()}`,\r\n      content: '',\r\n      x: Math.floor(Math.random() * 600),\r\n      y: Math.floor(Math.random() * 400),\r\n      color: '#ffff88',\r\n      font: 'sans-serif',\r\n      pinned: false,\r\n      labels: [],\r\n      _touched: false\r\n    };\r\n    setNotes(prev => [...prev, tempNote]);\r\n  };\r\n\r\n\r\n  const filteredNotes = notes.filter(filterByLabel);\r\n  const pinnedNotes = filteredNotes.filter(note => note.pinned);\r\n  const unpinnedNotes = filteredNotes.filter(note => !note.pinned);\r\n\r\n  return (\r\n    <div className=\"canvas-section\">\r\n      <div className=\"canvas-notes note-canvas\">\r\n        {[...pinnedNotes, ...unpinnedNotes].map((note) => (\r\n          <Note\r\n            key={note._id || note.tempId}\r\n            note={note}\r\n            onDelete={() => {\r\n              if (note._id) moveToTrash(note);\r\n              else if (note.tempId) setNotes(prev => prev.filter(n => n.tempId !== note.tempId));\r\n            }}\r\n            onPin={() => togglePin(note)}\r\n            onUpdate={updateNote}\r\n          />\r\n        ))}\r\n      </div>\r\n      <button className=\"add-note-btn\" onClick={addTemporaryNote} title=\"Add new note\">\r\n        ＋\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteCanvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}