{"ast":null,"code":"var _jsxFileName = \"D:\\\\text-notes-tool\\\\client\\\\src\\\\components\\\\NoteCanvas.jsx\";\nimport React from 'react';\nimport axios from 'axios';\nimport Note from './Note';\nimport './NoteCanvas.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteCanvas = ({\n  activeLabel,\n  labels,\n  setLabels,\n  notes,\n  setNotes,\n  fetchNotes\n}) => {\n  const updateNote = async updatedNote => {\n    const isBlank = !updatedNote.content;\n    if (updatedNote.tempId && isBlank && !updatedNote._touched) {\n      setNotes(prev => prev.filter(n => n.tempId !== updatedNote.tempId));\n      return;\n    }\n    if (updatedNote._id && isBlank && !updatedNote._touched) {\n      try {\n        const res = await axios.put(`http://localhost:5000/api/notes/${updatedNote._id}`, {\n          ...updatedNote,\n          content: ''\n        });\n        setNotes(prev => prev.map(n => n._id === updatedNote._id ? res.data : n));\n      } catch (err) {\n        console.error('Failed to update blank note:', err);\n      }\n      return;\n    }\n    if (updatedNote.tempId && !updatedNote._id) {\n      try {\n        const res = await axios.post('http://localhost:5000/api/notes', {\n          ...updatedNote,\n          tempId: undefined\n        });\n        setNotes(prev => prev.map(n => n.tempId === updatedNote.tempId ? res.data : n));\n      } catch (err) {\n        console.error('Failed to save new note:', err);\n      }\n      return;\n    }\n    if (updatedNote._id) {\n      try {\n        const res = await axios.put(`http://localhost:5000/api/notes/${updatedNote._id}`, updatedNote);\n        setNotes(prev => prev.map(n => n._id === updatedNote._id ? res.data : n));\n        const noteLabels = updatedNote.labels || [];\n        const currentLabelNames = labels.map(l => l.name.toLowerCase());\n        const newLabels = noteLabels.filter(l => !currentLabelNames.includes(l.toLowerCase()));\n        if (newLabels.length > 0) {\n          const addedLabels = await Promise.all(newLabels.map(name => axios.post('http://localhost:5000/api/labels', {\n            name\n          }).then(res => res.data)));\n          setLabels(prev => [...prev, ...addedLabels].sort((a, b) => a.name.localeCompare(b.name)));\n        }\n      } catch (err) {\n        console.error('Error updating note:', err);\n      }\n    }\n  };\n  const handleDelete = async (note, force = false) => {\n    try {\n      var _note$content;\n      if (force || !((_note$content = note.content) !== null && _note$content !== void 0 && _note$content.trim())) {\n        await axios.delete(`http://localhost:5000/api/notes/${note._id}?force=true`);\n      } else {\n        await axios.delete(`http://localhost:5000/api/notes/${note._id}`);\n      }\n      fetchNotes();\n    } catch (err) {\n      console.error('Failed to delete note:', err);\n    }\n  };\n  const togglePin = async note => {\n    if (!note) return;\n    const updated = {\n      ...note,\n      pinned: !note.pinned,\n      _touched: true\n    };\n    await updateNote(updated);\n  };\n  const filterByLabel = note => {\n    var _note$labels;\n    if (activeLabel === 'Trash') return false;\n    return activeLabel === 'Notes' || !activeLabel || activeLabel === 'Labels' ? true : (_note$labels = note.labels) === null || _note$labels === void 0 ? void 0 : _note$labels.includes(activeLabel);\n  };\n  const addTemporaryNote = () => {\n    const hasEmptyNote = notes.some(n => !n.content || n.content.trim() === '');\n    if (hasEmptyNote) {\n      alert('Please fill or delete the empty note before adding a new one.');\n      return;\n    }\n    const tempNote = {\n      tempId: `temp-${Date.now()}`,\n      content: '',\n      x: Math.floor(Math.random() * 600),\n      y: Math.floor(Math.random() * 400),\n      color: '#ffff88',\n      font: 'sans-serif',\n      pinned: false,\n      labels: [],\n      _touched: false\n    };\n    setNotes(prev => [...prev, tempNote]);\n  };\n  const filteredNotes = notes.filter(filterByLabel);\n  const pinnedNotes = filteredNotes.filter(note => note.pinned);\n  const unpinnedNotes = filteredNotes.filter(note => !note.pinned);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-notes note-canvas\",\n      children: [...pinnedNotes, ...unpinnedNotes].map(note => /*#__PURE__*/_jsxDEV(Note, {\n        note: note,\n        onDelete: (noteObj, force) => {\n          if (noteObj._id) handleDelete(noteObj, force);else if (noteObj.tempId) {\n            setNotes(prev => prev.filter(n => n.tempId !== noteObj.tempId));\n          }\n        },\n        onPin: () => togglePin(note),\n        onUpdate: updateNote\n      }, note._id || note.tempId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-note-btn\",\n      onClick: addTemporaryNote,\n      title: \"Add new note\",\n      children: \"\\uFF0B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n_c = NoteCanvas;\nexport default NoteCanvas;\nvar _c;\n$RefreshReg$(_c, \"NoteCanvas\");","map":{"version":3,"names":["React","axios","Note","jsxDEV","_jsxDEV","NoteCanvas","activeLabel","labels","setLabels","notes","setNotes","fetchNotes","updateNote","updatedNote","isBlank","content","tempId","_touched","prev","filter","n","_id","res","put","map","data","err","console","error","post","undefined","noteLabels","currentLabelNames","l","name","toLowerCase","newLabels","includes","length","addedLabels","Promise","all","then","sort","a","b","localeCompare","handleDelete","note","force","_note$content","trim","delete","togglePin","updated","pinned","filterByLabel","_note$labels","addTemporaryNote","hasEmptyNote","some","alert","tempNote","Date","now","x","Math","floor","random","y","color","font","filteredNotes","pinnedNotes","unpinnedNotes","className","children","onDelete","noteObj","onPin","onUpdate","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","_c","$RefreshReg$"],"sources":["D:/text-notes-tool/client/src/components/NoteCanvas.jsx"],"sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport Note from './Note';\r\nimport './NoteCanvas.css';\r\n\r\nconst NoteCanvas = ({\r\n  activeLabel,\r\n  labels,\r\n  setLabels,\r\n  notes,\r\n  setNotes,\r\n  fetchNotes\r\n}) => {\r\n  const updateNote = async (updatedNote) => {\r\n    const isBlank = !updatedNote.content;\r\n\r\n    if (updatedNote.tempId && isBlank && !updatedNote._touched) {\r\n      setNotes(prev => prev.filter(n => n.tempId !== updatedNote.tempId));\r\n      return;\r\n    }\r\n\r\n    if (updatedNote._id && isBlank && !updatedNote._touched) {\r\n      try {\r\n        const res = await axios.put(`http://localhost:5000/api/notes/${updatedNote._id}`, {\r\n          ...updatedNote,\r\n          content: ''\r\n        });\r\n        setNotes(prev => prev.map(n => n._id === updatedNote._id ? res.data : n));\r\n      } catch (err) {\r\n        console.error('Failed to update blank note:', err);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (updatedNote.tempId && !updatedNote._id) {\r\n      try {\r\n        const res = await axios.post('http://localhost:5000/api/notes', {\r\n          ...updatedNote,\r\n          tempId: undefined\r\n        });\r\n        setNotes(prev =>\r\n          prev.map(n =>\r\n            n.tempId === updatedNote.tempId ? res.data : n\r\n          )\r\n        );\r\n      } catch (err) {\r\n        console.error('Failed to save new note:', err);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (updatedNote._id) {\r\n      try {\r\n        const res = await axios.put(\r\n          `http://localhost:5000/api/notes/${updatedNote._id}`,\r\n          updatedNote\r\n        );\r\n        setNotes(prev =>\r\n          prev.map(n => n._id === updatedNote._id ? res.data : n)\r\n        );\r\n\r\n        const noteLabels = updatedNote.labels || [];\r\n        const currentLabelNames = labels.map(l => l.name.toLowerCase());\r\n        const newLabels = noteLabels.filter(\r\n          l => !currentLabelNames.includes(l.toLowerCase())\r\n        );\r\n\r\n        if (newLabels.length > 0) {\r\n          const addedLabels = await Promise.all(\r\n            newLabels.map(name =>\r\n              axios.post('http://localhost:5000/api/labels', { name }).then(res => res.data)\r\n            )\r\n          );\r\n          setLabels(prev =>\r\n            [...prev, ...addedLabels].sort((a, b) =>\r\n              a.name.localeCompare(b.name)\r\n            )\r\n          );\r\n        }\r\n      } catch (err) {\r\n        console.error('Error updating note:', err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (note, force = false) => {\r\n    try {\r\n      if (force || !note.content?.trim()) {\r\n        await axios.delete(`http://localhost:5000/api/notes/${note._id}?force=true`);\r\n      } else {\r\n        await axios.delete(`http://localhost:5000/api/notes/${note._id}`);\r\n      }\r\n      fetchNotes();\r\n    } catch (err) {\r\n      console.error('Failed to delete note:', err);\r\n    }\r\n  };\r\n\r\n  const togglePin = async (note) => {\r\n    if (!note) return;\r\n    const updated = { ...note, pinned: !note.pinned, _touched: true };\r\n    await updateNote(updated);\r\n  };\r\n\r\n  const filterByLabel = (note) => {\r\n    if (activeLabel === 'Trash') return false;\r\n    return activeLabel === 'Notes' || !activeLabel || activeLabel === 'Labels'\r\n      ? true\r\n      : note.labels?.includes(activeLabel);\r\n  };\r\n\r\n  const addTemporaryNote = () => {\r\n    const hasEmptyNote = notes.some(n =>\r\n      (!n.content || n.content.trim() === '')\r\n    );\r\n\r\n    if (hasEmptyNote) {\r\n      alert('Please fill or delete the empty note before adding a new one.');\r\n      return;\r\n    }\r\n\r\n    const tempNote = {\r\n      tempId: `temp-${Date.now()}`,\r\n      content: '',\r\n      x: Math.floor(Math.random() * 600),\r\n      y: Math.floor(Math.random() * 400),\r\n      color: '#ffff88',\r\n      font: 'sans-serif',\r\n      pinned: false,\r\n      labels: [],\r\n      _touched: false\r\n    };\r\n    setNotes(prev => [...prev, tempNote]);\r\n  };\r\n\r\n  const filteredNotes = notes.filter(filterByLabel);\r\n  const pinnedNotes = filteredNotes.filter(note => note.pinned);\r\n  const unpinnedNotes = filteredNotes.filter(note => !note.pinned);\r\n\r\n  return (\r\n    <div className=\"canvas-section\">\r\n      <div className=\"canvas-notes note-canvas\">\r\n        {[...pinnedNotes, ...unpinnedNotes].map((note) => (\r\n          <Note\r\n            key={note._id || note.tempId}\r\n            note={note}\r\n            onDelete={(noteObj, force) => {\r\n              if (noteObj._id) handleDelete(noteObj, force);\r\n              else if (noteObj.tempId) {\r\n                setNotes(prev => prev.filter(n => n.tempId !== noteObj.tempId));\r\n              }\r\n            }}\r\n            onPin={() => togglePin(note)}\r\n            onUpdate={updateNote}\r\n          />\r\n        ))}\r\n      </div>\r\n      <button className=\"add-note-btn\" onClick={addTemporaryNote} title=\"Add new note\">\r\n        ＋\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteCanvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}