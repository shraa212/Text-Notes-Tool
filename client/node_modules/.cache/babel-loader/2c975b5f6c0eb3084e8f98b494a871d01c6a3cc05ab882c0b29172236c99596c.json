{"ast":null,"code":"var _jsxFileName = \"D:\\\\text-notes-tool\\\\client\\\\src\\\\components\\\\NoteCanvas.jsx\";\nimport React from 'react';\nimport axios from 'axios';\nimport Note from './Note';\nimport './NoteCanvas.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteCanvas = ({\n  activeLabel,\n  labels,\n  setLabels,\n  notes,\n  setNotes,\n  fetchNotes,\n  moveToTrash\n}) => {\n  const updateNote = async updatedNote => {\n    var _updatedNote$content;\n    const isBlank = !((_updatedNote$content = updatedNote.content) !== null && _updatedNote$content !== void 0 && _updatedNote$content.trim());\n    if (updatedNote.tempId && isBlank) {\n      setNotes(prev => prev.filter(n => n.tempId !== updatedNote.tempId));\n      return;\n    }\n    if (updatedNote._id && isBlank) {\n      try {\n        await axios.delete(`http://localhost:5000/api/notes/${updatedNote._id}`);\n        setNotes(prev => prev.filter(n => n._id !== updatedNote._id));\n      } catch (err) {\n        console.error('Failed to delete blank note:', err);\n      }\n      return;\n    }\n    if (updatedNote.tempId && !updatedNote._id) {\n      try {\n        const res = await axios.post('http://localhost:5000/api/notes', {\n          ...updatedNote,\n          tempId: undefined\n        });\n        setNotes(prev => prev.map(n => n.tempId === updatedNote.tempId ? res.data : n));\n      } catch (err) {\n        console.error('Failed to save new note:', err);\n      }\n      return;\n    }\n    if (updatedNote._id) {\n      try {\n        const res = await axios.put(`http://localhost:5000/api/notes/${updatedNote._id}`, updatedNote);\n        setNotes(prev => prev.map(n => n._id === updatedNote._id ? res.data : n));\n        const noteLabels = updatedNote.labels || [];\n        const currentLabelNames = labels.map(l => l.name.toLowerCase());\n        const newLabels = noteLabels.filter(l => !currentLabelNames.includes(l.toLowerCase()));\n        if (newLabels.length > 0) {\n          const addedLabels = await Promise.all(newLabels.map(name => axios.post('http://localhost:5000/api/labels', {\n            name\n          }).then(res => res.data)));\n          setLabels(prev => [...prev, ...addedLabels].sort((a, b) => a.name.localeCompare(b.name)));\n        }\n      } catch (err) {\n        console.error('Error updating note:', err);\n      }\n    }\n  };\n  const togglePin = async id => {\n    const noteToToggle = notes.find(n => n._id === id);\n    if (!noteToToggle) return;\n    const updated = {\n      ...noteToToggle,\n      pinned: !noteToToggle.pinned\n    };\n    await updateNote(updated);\n  };\n  const filterByLabel = note => {\n    var _note$labels;\n    if (activeLabel === 'Trash') return note.trashed;\n    return activeLabel === 'Notes' || !activeLabel || activeLabel === 'Labels' ? !note.trashed : ((_note$labels = note.labels) === null || _note$labels === void 0 ? void 0 : _note$labels.includes(activeLabel)) && !note.trashed;\n  };\n  const addTemporaryNote = () => {\n    const hasEmpty = notes.some(n => {\n      var _n$content;\n      return !((_n$content = n.content) !== null && _n$content !== void 0 && _n$content.trim()) && !n._id;\n    });\n    if (hasEmpty) {\n      alert('Please fill or delete the empty note before adding a new one.');\n      return;\n    }\n    const hasExistingEmpty = notes.some(n => {\n      var _n$content2;\n      return !((_n$content2 = n.content) !== null && _n$content2 !== void 0 && _n$content2.trim()) && n._id && !n.trashed;\n    });\n    if (hasExistingEmpty) {\n      alert('Please fill or delete the existing empty note before adding a new one.');\n      return;\n    }\n    const tempNote = {\n      tempId: `temp-${Date.now()}`,\n      content: '',\n      x: Math.floor(Math.random() * 600),\n      y: Math.floor(Math.random() * 400),\n      color: '#ffff88',\n      font: 'sans-serif',\n      pinned: false,\n      labels: [],\n      trashed: false\n    };\n    setNotes(prev => [...prev, tempNote]);\n  };\n  const handleDelete = async note => {\n    var _note$content;\n    const isBlank = !((_note$content = note.content) !== null && _note$content !== void 0 && _note$content.trim());\n    if (isBlank) {\n      if (note._id) {\n        await axios.delete(`http://localhost:5000/api/notes/${note._id}`);\n        setNotes(prev => prev.filter(n => n._id !== note._id));\n      } else {\n        setNotes(prev => prev.filter(n => n.tempId !== note.tempId));\n      }\n    } else {\n      if (note._id) {\n        const res = await axios.put(`http://localhost:5000/api/notes/${note._id}`, {\n          ...note,\n          trashed: true\n        });\n        setNotes(prev => prev.map(n => n._id === note._id ? res.data : n));\n      }\n    }\n  };\n  const handleRestore = async note => {\n    if (note._id) {\n      const res = await axios.put(`http://localhost:5000/api/notes/${note._id}`, {\n        ...note,\n        trashed: false\n      });\n      setNotes(prev => prev.map(n => n._id === note._id ? res.data : n));\n    }\n  };\n  const handlePermanentDelete = async note => {\n    if (note._id) {\n      await axios.delete(`http://localhost:5000/api/notes/${note._id}`);\n      setNotes(prev => prev.filter(n => n._id !== note._id));\n    }\n  };\n  const filteredNotes = notes.filter(filterByLabel);\n  const pinnedNotes = filteredNotes.filter(note => note.pinned);\n  const unpinnedNotes = filteredNotes.filter(note => !note.pinned);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-notes\",\n      children: [...pinnedNotes, ...unpinnedNotes].map(note => /*#__PURE__*/_jsxDEV(Note, {\n        note: note,\n        onDelete: () => handleDelete(note),\n        onPin: togglePin,\n        onUpdate: updateNote,\n        onRestore: handleRestore,\n        onPermanentDelete: handlePermanentDelete,\n        isInTrash: activeLabel === 'Trash'\n      }, note._id || note.tempId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), activeLabel !== 'Trash' && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-note-btn\",\n      onClick: addTemporaryNote,\n      title: \"Add new note\",\n      children: \"\\uFF0B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n_c = NoteCanvas;\nexport default NoteCanvas;\nvar _c;\n$RefreshReg$(_c, \"NoteCanvas\");","map":{"version":3,"names":["React","axios","Note","jsxDEV","_jsxDEV","NoteCanvas","activeLabel","labels","setLabels","notes","setNotes","fetchNotes","moveToTrash","updateNote","updatedNote","_updatedNote$content","isBlank","content","trim","tempId","prev","filter","n","_id","delete","err","console","error","res","post","undefined","map","data","put","noteLabels","currentLabelNames","l","name","toLowerCase","newLabels","includes","length","addedLabels","Promise","all","then","sort","a","b","localeCompare","togglePin","id","noteToToggle","find","updated","pinned","filterByLabel","note","_note$labels","trashed","addTemporaryNote","hasEmpty","some","_n$content","alert","hasExistingEmpty","_n$content2","tempNote","Date","now","x","Math","floor","random","y","color","font","handleDelete","_note$content","handleRestore","handlePermanentDelete","filteredNotes","pinnedNotes","unpinnedNotes","className","children","onDelete","onPin","onUpdate","onRestore","onPermanentDelete","isInTrash","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","_c","$RefreshReg$"],"sources":["D:/text-notes-tool/client/src/components/NoteCanvas.jsx"],"sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport Note from './Note';\r\nimport './NoteCanvas.css';\r\n\r\nconst NoteCanvas = ({\r\n  activeLabel,\r\n  labels,\r\n  setLabels,\r\n  notes,\r\n  setNotes,\r\n  fetchNotes,\r\n  moveToTrash\r\n}) => {\r\n  const updateNote = async (updatedNote) => {\r\n    const isBlank = !updatedNote.content?.trim();\r\n\r\n    if (updatedNote.tempId && isBlank) {\r\n      setNotes(prev => prev.filter(n => n.tempId !== updatedNote.tempId));\r\n      return;\r\n    }\r\n\r\n    if (updatedNote._id && isBlank) {\r\n      try {\r\n        await axios.delete(`http://localhost:5000/api/notes/${updatedNote._id}`);\r\n        setNotes(prev => prev.filter(n => n._id !== updatedNote._id));\r\n      } catch (err) {\r\n        console.error('Failed to delete blank note:', err);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (updatedNote.tempId && !updatedNote._id) {\r\n      try {\r\n        const res = await axios.post('http://localhost:5000/api/notes', {\r\n          ...updatedNote,\r\n          tempId: undefined,\r\n        });\r\n        setNotes(prev =>\r\n          prev.map(n =>\r\n            n.tempId === updatedNote.tempId ? res.data : n\r\n          )\r\n        );\r\n      } catch (err) {\r\n        console.error('Failed to save new note:', err);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (updatedNote._id) {\r\n      try {\r\n        const res = await axios.put(\r\n          `http://localhost:5000/api/notes/${updatedNote._id}`,\r\n          updatedNote\r\n        );\r\n        setNotes(prev =>\r\n          prev.map(n => n._id === updatedNote._id ? res.data : n)\r\n        );\r\n\r\n        const noteLabels = updatedNote.labels || [];\r\n        const currentLabelNames = labels.map(l => l.name.toLowerCase());\r\n        const newLabels = noteLabels.filter(\r\n          l => !currentLabelNames.includes(l.toLowerCase())\r\n        );\r\n\r\n        if (newLabels.length > 0) {\r\n          const addedLabels = await Promise.all(\r\n            newLabels.map(name =>\r\n              axios.post('http://localhost:5000/api/labels', { name }).then(res => res.data)\r\n            )\r\n          );\r\n          setLabels(prev =>\r\n            [...prev, ...addedLabels].sort((a, b) =>\r\n              a.name.localeCompare(b.name)\r\n            )\r\n          );\r\n        }\r\n      } catch (err) {\r\n        console.error('Error updating note:', err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const togglePin = async (id) => {\r\n    const noteToToggle = notes.find((n) => n._id === id);\r\n    if (!noteToToggle) return;\r\n    const updated = { ...noteToToggle, pinned: !noteToToggle.pinned };\r\n    await updateNote(updated);\r\n  };\r\n\r\n  const filterByLabel = (note) => {\r\n    if (activeLabel === 'Trash') return note.trashed;\r\n    return (activeLabel === 'Notes' || !activeLabel || activeLabel === 'Labels')\r\n      ? !note.trashed\r\n      : note.labels?.includes(activeLabel) && !note.trashed;\r\n  };\r\n\r\n  const addTemporaryNote = () => {\r\n    const hasEmpty = notes.some(n => !n.content?.trim() && !n._id);\r\n    if (hasEmpty) {\r\n      alert('Please fill or delete the empty note before adding a new one.');\r\n      return;\r\n    }\r\n\r\n    const hasExistingEmpty = notes.some(n => !n.content?.trim() && n._id && !n.trashed);\r\n    if (hasExistingEmpty) {\r\n      alert('Please fill or delete the existing empty note before adding a new one.');\r\n      return;\r\n    }\r\n\r\n    const tempNote = {\r\n      tempId: `temp-${Date.now()}`,\r\n      content: '',\r\n      x: Math.floor(Math.random() * 600),\r\n      y: Math.floor(Math.random() * 400),\r\n      color: '#ffff88',\r\n      font: 'sans-serif',\r\n      pinned: false,\r\n      labels: [],\r\n      trashed: false\r\n    };\r\n    setNotes(prev => [...prev, tempNote]);\r\n  };\r\n\r\n  const handleDelete = async (note) => {\r\n    const isBlank = !note.content?.trim();\r\n    if (isBlank) {\r\n      if (note._id) {\r\n        await axios.delete(`http://localhost:5000/api/notes/${note._id}`);\r\n        setNotes(prev => prev.filter(n => n._id !== note._id));\r\n      } else {\r\n        setNotes(prev => prev.filter(n => n.tempId !== note.tempId));\r\n      }\r\n    } else {\r\n      if (note._id) {\r\n        const res = await axios.put(`http://localhost:5000/api/notes/${note._id}`, { ...note, trashed: true });\r\n        setNotes(prev => prev.map(n => n._id === note._id ? res.data : n));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRestore = async (note) => {\r\n    if (note._id) {\r\n      const res = await axios.put(`http://localhost:5000/api/notes/${note._id}`, { ...note, trashed: false });\r\n      setNotes(prev => prev.map(n => n._id === note._id ? res.data : n));\r\n    }\r\n  };\r\n\r\n  const handlePermanentDelete = async (note) => {\r\n    if (note._id) {\r\n      await axios.delete(`http://localhost:5000/api/notes/${note._id}`);\r\n      setNotes(prev => prev.filter(n => n._id !== note._id));\r\n    }\r\n  };\r\n\r\n  const filteredNotes = notes.filter(filterByLabel);\r\n  const pinnedNotes = filteredNotes.filter(note => note.pinned);\r\n  const unpinnedNotes = filteredNotes.filter(note => !note.pinned);\r\n\r\n  return (\r\n    <div className=\"canvas-section\">\r\n      <div className=\"canvas-notes\">\r\n        {[...pinnedNotes, ...unpinnedNotes].map((note) => (\r\n          <Note\r\n            key={note._id || note.tempId}\r\n            note={note}\r\n            onDelete={() => handleDelete(note)}\r\n            onPin={togglePin}\r\n            onUpdate={updateNote}\r\n            onRestore={handleRestore}\r\n            onPermanentDelete={handlePermanentDelete}\r\n            isInTrash={activeLabel === 'Trash'}\r\n          />\r\n        ))}\r\n      </div>\r\n      {activeLabel !== 'Trash' && (\r\n        <button className=\"add-note-btn\" onClick={addTemporaryNote} title=\"Add new note\">\r\n          ＋\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteCanvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}