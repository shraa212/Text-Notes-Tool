{"ast":null,"code":"var _jsxFileName = \"D:\\\\text-notes-tool\\\\client\\\\src\\\\components\\\\NoteCanvas.jsx\";\nimport React from 'react';\nimport axios from 'axios';\nimport Note from './Note';\nimport './NoteCanvas.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteCanvas = ({\n  activeLabel,\n  labels,\n  setLabels,\n  notes,\n  setNotes,\n  fetchNotes\n}) => {\n  const deleteNote = async id => {\n    if (!id) return;\n    try {\n      await axios.delete(`http://localhost:5000/api/notes/${id}`);\n      setNotes(prev => prev.filter(note => note._id !== id));\n    } catch (err) {\n      console.error('Error deleting note:', err);\n    }\n  };\n  const updateNote = async updatedNote => {\n    var _updatedNote$content;\n    const isBlank = !((_updatedNote$content = updatedNote.content) !== null && _updatedNote$content !== void 0 && _updatedNote$content.trim());\n    if (isBlank) {\n      if (updatedNote.tempId) {\n        setNotes(prev => prev.filter(n => n.tempId !== updatedNote.tempId));\n      } else if (updatedNote._id) {\n        await deleteNote(updatedNote._id);\n      }\n      return;\n    }\n    if (updatedNote.tempId && !updatedNote._id) {\n      try {\n        const res = await axios.post('http://localhost:5000/api/notes', {\n          ...updatedNote,\n          tempId: undefined\n        });\n        setNotes(prev => prev.map(n => n.tempId === updatedNote.tempId ? res.data : n));\n      } catch (err) {\n        console.error('Failed to save new note:', err);\n      }\n      return;\n    }\n    if (updatedNote._id) {\n      try {\n        const res = await axios.put(`http://localhost:5000/api/notes/${updatedNote._id}`, updatedNote);\n        setNotes(prev => prev.map(n => n._id === updatedNote._id ? res.data : n));\n        const noteLabels = updatedNote.labels || [];\n        const currentLabelNames = labels.map(l => l.name.toLowerCase());\n        const newLabels = noteLabels.filter(l => !currentLabelNames.includes(l.toLowerCase()));\n        if (newLabels.length > 0) {\n          const addedLabels = await Promise.all(newLabels.map(name => axios.post('http://localhost:5000/api/labels', {\n            name\n          }).then(res => res.data)));\n          setLabels(prev => [...prev, ...addedLabels].sort((a, b) => a.name.localeCompare(b.name)));\n        }\n      } catch (err) {\n        console.error('Error updating note:', err);\n      }\n    }\n  };\n  const togglePin = async id => {\n    const noteToToggle = notes.find(n => n._id === id);\n    if (!noteToToggle) return;\n    const updated = {\n      ...noteToToggle,\n      pinned: !noteToToggle.pinned\n    };\n    await updateNote(updated);\n  };\n  const filterByLabel = note => {\n    var _note$labels;\n    return activeLabel === 'Notes' || !activeLabel || activeLabel === 'Labels' ? true : (_note$labels = note.labels) === null || _note$labels === void 0 ? void 0 : _note$labels.includes(activeLabel);\n  };\n  const addTemporaryNote = () => {\n    const tempNote = {\n      tempId: `temp-${Date.now()}`,\n      content: '',\n      x: Math.floor(Math.random() * 600),\n      y: Math.floor(Math.random() * 400),\n      color: '#ffff88',\n      font: 'sans-serif',\n      pinned: false,\n      labels: []\n    };\n    setNotes(prev => [...prev, tempNote]);\n  };\n  const filteredNotes = notes.filter(filterByLabel);\n  const pinnedNotes = filteredNotes.filter(note => note.pinned);\n  const unpinnedNotes = filteredNotes.filter(note => !note.pinned);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-notes\",\n      children: [...pinnedNotes, ...unpinnedNotes].map(note => /*#__PURE__*/_jsxDEV(Note, {\n        note: note,\n        onDelete: deleteNote,\n        onPin: togglePin,\n        onUpdate: updateNote\n      }, note._id || note.tempId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-note-btn\",\n      onClick: addTemporaryNote,\n      title: \"Add new note\",\n      children: \"\\uFF0B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_c = NoteCanvas;\nexport default NoteCanvas;\nvar _c;\n$RefreshReg$(_c, \"NoteCanvas\");","map":{"version":3,"names":["React","axios","Note","jsxDEV","_jsxDEV","NoteCanvas","activeLabel","labels","setLabels","notes","setNotes","fetchNotes","deleteNote","id","delete","prev","filter","note","_id","err","console","error","updateNote","updatedNote","_updatedNote$content","isBlank","content","trim","tempId","n","res","post","undefined","map","data","put","noteLabels","currentLabelNames","l","name","toLowerCase","newLabels","includes","length","addedLabels","Promise","all","then","sort","a","b","localeCompare","togglePin","noteToToggle","find","updated","pinned","filterByLabel","_note$labels","addTemporaryNote","tempNote","Date","now","x","Math","floor","random","y","color","font","filteredNotes","pinnedNotes","unpinnedNotes","className","children","onDelete","onPin","onUpdate","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","_c","$RefreshReg$"],"sources":["D:/text-notes-tool/client/src/components/NoteCanvas.jsx"],"sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport Note from './Note';\r\nimport './NoteCanvas.css';\r\n\r\nconst NoteCanvas = ({ activeLabel, labels, setLabels, notes, setNotes, fetchNotes }) => {\r\n\r\n  const deleteNote = async (id) => {\r\n    if (!id) return;\r\n\r\n    try {\r\n      await axios.delete(`http://localhost:5000/api/notes/${id}`);\r\n      setNotes(prev => prev.filter(note => note._id !== id));\r\n    } catch (err) {\r\n      console.error('Error deleting note:', err);\r\n    }\r\n  };\r\n\r\n  const updateNote = async (updatedNote) => {\r\n    const isBlank = !updatedNote.content?.trim();\r\n\r\n    if (isBlank) {\r\n      if (updatedNote.tempId) {\r\n        setNotes(prev => prev.filter(n => n.tempId !== updatedNote.tempId));\r\n      } else if (updatedNote._id) {\r\n        await deleteNote(updatedNote._id);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (updatedNote.tempId && !updatedNote._id) {\r\n      try {\r\n        const res = await axios.post('http://localhost:5000/api/notes', {\r\n          ...updatedNote,\r\n          tempId: undefined,\r\n        });\r\n        setNotes(prev =>\r\n          prev.map(n =>\r\n            n.tempId === updatedNote.tempId ? res.data : n\r\n          )\r\n        );\r\n      } catch (err) {\r\n        console.error('Failed to save new note:', err);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (updatedNote._id) {\r\n      try {\r\n        const res = await axios.put(\r\n          `http://localhost:5000/api/notes/${updatedNote._id}`,\r\n          updatedNote\r\n        );\r\n        setNotes(prev =>\r\n          prev.map(n => n._id === updatedNote._id ? res.data : n)\r\n        );\r\n\r\n        const noteLabels = updatedNote.labels || [];\r\n        const currentLabelNames = labels.map(l => l.name.toLowerCase());\r\n        const newLabels = noteLabels.filter(\r\n          l => !currentLabelNames.includes(l.toLowerCase())\r\n        );\r\n\r\n        if (newLabels.length > 0) {\r\n          const addedLabels = await Promise.all(\r\n            newLabels.map(name =>\r\n              axios.post('http://localhost:5000/api/labels', { name }).then(res => res.data)\r\n            )\r\n          );\r\n          setLabels(prev =>\r\n            [...prev, ...addedLabels].sort((a, b) =>\r\n              a.name.localeCompare(b.name)\r\n            )\r\n          );\r\n        }\r\n      } catch (err) {\r\n        console.error('Error updating note:', err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const togglePin = async (id) => {\r\n    const noteToToggle = notes.find((n) => n._id === id);\r\n    if (!noteToToggle) return;\r\n    const updated = { ...noteToToggle, pinned: !noteToToggle.pinned };\r\n    await updateNote(updated);\r\n  };\r\n\r\n  const filterByLabel = (note) => {\r\n    return activeLabel === 'Notes' || !activeLabel || activeLabel === 'Labels'\r\n      ? true\r\n      : note.labels?.includes(activeLabel);\r\n  };\r\n\r\n  const addTemporaryNote = () => {\r\n    const tempNote = {\r\n      tempId: `temp-${Date.now()}`,\r\n      content: '',\r\n      x: Math.floor(Math.random() * 600),\r\n      y: Math.floor(Math.random() * 400),\r\n      color: '#ffff88',\r\n      font: 'sans-serif',\r\n      pinned: false,\r\n      labels: []\r\n    };\r\n    setNotes(prev => [...prev, tempNote]);\r\n  };\r\n\r\n  const filteredNotes = notes.filter(filterByLabel);\r\n  const pinnedNotes = filteredNotes.filter(note => note.pinned);\r\n  const unpinnedNotes = filteredNotes.filter(note => !note.pinned);\r\n\r\n  return (\r\n    <div className=\"canvas-section\">\r\n      <div className=\"canvas-notes\">\r\n        {[...pinnedNotes, ...unpinnedNotes].map((note) => (\r\n          <Note\r\n            key={note._id || note.tempId}\r\n            note={note}\r\n            onDelete={deleteNote}\r\n            onPin={togglePin}\r\n            onUpdate={updateNote}\r\n          />\r\n        ))}\r\n      </div>\r\n      <button className=\"add-note-btn\" onClick={addTemporaryNote} title=\"Add new note\">\r\n        ï¼‹\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteCanvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}